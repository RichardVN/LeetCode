Time: O(1), guarantee 32 bits

Convert Decimal to Binary:
- Divide by 2 until reach 0, keep track of remainders 
- Binary number is string of remainders from bottom up

Convert Binary to Decimal:
- Add value of 2^0 + 2^1 ... 

Print Binary string of integer x:
    print(bin(x))

Shift all bits to the right (remove least significant):
-  num >>= 1

&   AND
|   OR 
^   XOR 
~   NOT

- a XOR 0  = a
- a XOR a  = 0
- a XOR b XOR a   equivalent to   a XOR a XOR b  (transitive)

Cancel out two duplicates:
- a XOR a = 0

Remove least significant 1, keeping other bits the same:
- num = num & (num - 1)

Get least significant bit w/ bitMask:
- num AND 1
- num OR 0

Helpful for array problems:
- ONE missing or ONE duplicate 
- values limited in range

Not helpful for MULTIPLE duplicates of one number