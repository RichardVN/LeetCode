Problems:
https://leetcode.com/problems/max-consecutive-ones-iii/discuss/247564/javacpython-sliding-window/379427?page=3

Examples:
    - Consecutive Ones
    - Minimum Size Subarray Sum
    - Buy Sell Stock

When to use:
    - 1. Data structure of sequential elements (string, array, linked list)
    - 2. We are looking for a CONTIGUOUS subsection
    - 3. We have a WINDOW CONSTRAINT that we check makes window invalid or valid
    - 4. We are trying to OPTIMIZE a value (keep running max/min)
        1. Get the smallest or largest window size (i-j+1)
        2. Some other value that we calculate at each window and keep running min/max of, e.g. max profit

How to use:
    - ** UPDATING CONSTRAINT    
        - update j, THEN update constraint for new window value
        - update constraint, THEN update i for removed window value
    - Two pointers. 
        Pointer 1: "fast" pointer that reads through all values of array. Makes step each iteration, such as for loop
        Pointer 2: "slow" pointer that represents the start of the window

    NOTE: Although we may have a nested "while loop" inside a for loop, in total i and j may only travel N elements each
            We are NOT looping through N elements for each iteration of j using while loop
            Because a window size of 0 is always valid

WHILE LOOP = SHRINK

Minimum Window: R - Tries to expand until a valid answer    L - Tries to greedily shrink until invalid (while)
    ** We start as invalid
    1. Initialize the max/min value we are trying to optimize for (optional if we just need BIGGEST window size)
    2. Initialize the constraint of elements WITHIN window (e.g. maximum zeroes, minimum sum of window)
    3.. For loop in which we increment fast pointer (expand until valid)
        a. Update constraint variable based on r that is added to window
        b. WHILE VALID constraint conditions, shrink
            i.)  !! We are valid. UPDATE ANSWER if better
            ii.) ** Update constraint variable from value we remove from window BEFORE increment l
            iii.) increment l pointer
    4. return optimized value

Maximum window:  R - Tries to expand greedily until invalid.   L - Tries to shrink until valid (while)
    NOTE: if we have a variable to keep track max window size (instead of maintaining the window size of answer)
          Then we can have a while loop that increments until the constraint is met, similar to above. And update best if valid
    ** We start as valid
    1. Initialize the max/min value we are trying to optimize for (optional if we just need BIGGEST window size)
    2. Initialize the constraint of elements WITHIN window (e.g. maximum zeroes, minimum sum of window)
    3. For loop in which we increment fast pointer  (expand until invalid)
        a. Update constraint variable based on r that is added to window
        b. WHILE INVALID constraint conditions, shrink
            i.) ** Update the constraint of value we remove from window BEFORE increment l 
            ii.) increment l pointer 
        c. !! we are valid again. UPDATE ANSWER if better
    4. return optimized answer