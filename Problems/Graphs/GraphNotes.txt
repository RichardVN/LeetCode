https://courses.cs.washington.edu/courses/cse326/03wi/lectures/RaoLect20.pdf

Algorithm Use Cases: 


Visit Set and processing data structure:
- DFS stack:
	- Visit all nodes once (cloning, num islands)
	- Backtracking allowed (word Search)
- BFS queue:
	- Find shortest path for unweighted graph without backtracking (shortest path in binary matrix)
- ** Djikstra min_heap (dist_from_source, Node)
	- Find best path from source to any destination, unweighted graph
- ** Prim's MST min_heap (cost_to_attach, Node)
	- Find lowest cost Minimum Spanning Tree that includes all nodes

Time: O(V + E)  ** if we use min heap, this becomes O(V + E * log V) because of heap push is log heap_size
Space: O(V)


Usage of Dynamic Programming for pathing problems
- Usually for a MATRIX GRID
- Traversal towards a direction with NO backtracking ... e.g. move towards smaller subproblem

Time / Space:  usually O(M*N) , which represents the number of possible "states" or grid cells


Implementations:
- TODO: use defaultdict when creating adjacency list maps or indegree counts 