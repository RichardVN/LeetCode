### Backtracking (General)
- number_subsets is (number of decision branches) ^ (number of decisions height)
- Time complexity is : number_subsets * size_subset
- TODO: if the input has duplicated nums, we have to SORT to avoid repeated work

- dfsBacktrack(i)  structure for SUBSETS and COMBINATIONS:
    - BaseAppend: when to append COPY of subset[] to totalSubsets[]? -- if subset we always append, if combo we append at certain length k
    - BaseInvalid: when to return on invalid condition?  -- e.g. runningSum > Target ... note that index is already bounded by for loop  
    - FOR j in range(i, len(candidates))  --  (Decision Tree) Loop thru all possible candidates for our given i 
        if j > i and candidates[j] == candidates[j-1]  ** TODO: handle duplicate input values, sorted
        combo.append(candidates[j])     -- 1. Pick candidate
        dfs(j+1)                        -- 2. Recursively call next decision. With updated index, and remaining candidates
        combo.pop()                     -- 3. We have just reached a base case. pop candidate from (1) so we can iterate for loop to next candidate
### SUBSETS
- Subsets:  equivalent of adding together all n Choose k, where k is 1 to N

Time:    O( 2^N * N )  ... number of subsets * time to copy subset to answer
Space:   O(N)

2-Branch DECISION TREE :  Take or not Take?  (Branch size = 2, Tree size = N)
ex. subsets of [4,8]

                        []                  --- dfsIndex(0)  .. take 4?
                []              [4]         --- dfsIndex(1)  .. take 8?
            []      [8]     [4]     [4, 8]

### COMBINATIONS 
- Specific type of subsets, but we have additional base case to append when subset hits size k choices.

Time:  O(N^k)
Space: O(k)

N-Way decision tree:  Choose from N candidates, then choose from remaining N-1 candidates, ...etc
    - if Num chosen as first item, CANNOT use candidates left of Num because order does not matter
ex. Candidates [1,2,3] choose 2

                                            []
        [1]                     [2]                  [3]             [4]
[1,2]  [1,3]  [1,4]       [2,3]     [2,4]            [3,4]            X


### PERMUTATIONS 
- do NOT pass in index, or call multiple dfs(i+1) ... we do NOT "exhaust" nums from prior indices
- if we can use a num as many times as we'd like (e.g phone combo), we DO NOT have to pop()
- We can pick any num as long as it is not in current permutation []
- TODO: if duplicates, create Counter() for numCount, and check if numCount > 0 before appending

Time: O(N! * N)
Space: O(N)


- dfsBacktrack()  structure for PERMUTATIONS:
    - BaseAppend: when do we append  COPY of permutation (usually when len(perm) == len(nums))?
    - BaseInvalid: when are we invalid? NOTE: we don't pass in i, so no index check
    - Decision Tree
        For option in options:  # TODO: it there are dupes, we loop thru optionCount.keys()
            if option valid:
                - 1. perm.append(option) # pick first valid choice
                - 2. dfs()               # (main difference from subset) The candidates are the same, we do not "exhaust" candidate[i] and increment an index
                - 3. perm.pop()          # We have just reached a base case. pop candidate from (1) so we can iterate for loop to next candidate

    - If duplicates in input -> numCount = Counter(nums)